// --------------------------------------
// schema.prisma
// --------------------------------------
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum UserRole {
  ADMIN
  ORGANISASI
  USER
}

enum ActivityStatus {
  DRAFT
  OPEN
  CLOSED
  COMPLETED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum FileType {
  PHOTO
  VIDEO
}

enum DonationStatus {
  PENDING
  APPROVED
  REJECTED
}

// ---------- Models ----------
model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // relasi
  organizations       Organization[]   @relation("OrgOwners")
  volunteerActivities VolunteerActivity[]
  donations           Donation[]
  notifications       Notification[]
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  description String
  isVerified  Boolean   @default(false) // diverifikasi admin
  owner       User      @relation("OrgOwners", fields: [ownerId], references: [id])
  ownerId     Int

  activities  Activity[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
}

model Activity {
  id             Int            @id @default(autoincrement())
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId Int
  name           String
  description    String
  date           DateTime
  status         ActivityStatus @default(DRAFT)

  // relasi
  volunteers     VolunteerActivity[]
  donations      Donation[]
  documents      Documentation[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([organizationId])
  @@index([status, date])
}

model VolunteerActivity {
  id          Int                @id @default(autoincrement())
  user        User               @relation(fields: [userId], references: [id])
  userId      Int
  activity    Activity           @relation(fields: [activityId], references: [id])
  activityId  Int
  status      VerificationStatus @default(PENDING)
  appliedAt   DateTime           @default(now())

  @@unique([userId, activityId])
  @@index([activityId, status])
}

model Donation {
  id            Int            @id @default(autoincrement())
  user          User?          @relation(fields: [userId], references: [id])
  userId        Int?

  activity      Activity       @relation(fields: [activityId], references: [id])
  activityId    Int

  name          String
  email         String
  phone         String?
  amount        Decimal        @db.Decimal(14, 2)
  method        String
  message       String?
  proofPath     String
  status        DonationStatus @default(PENDING)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([activityId, status])
  @@index([userId])
  @@index([email])
}

model Documentation {
  id           Int       @id @default(autoincrement())
  activity     Activity  @relation(fields: [activityId], references: [id])
  activityId   Int
  fileType     FileType
  filePath     String
  description  String?
  takenAt      DateTime   @default(now())

  @@index([activityId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  kind      String   // bebas: "VOLUNTEER_APPLY", "DONATION_NEW", "DONATION_APPROVED", dll
  createdAt DateTime @default(now())
  readAt    DateTime?

  @@index([userId, createdAt])
}
