// --------------------------------------
// schema.prisma
// --------------------------------------
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum UserRole {
  ADMIN
  ORGANISASI
  USER
}

enum ActivityStatus {
  DRAFT
  OPEN
  CLOSED
  COMPLETED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum FileType {
  PHOTO
  VIDEO
}

enum DonationStatus {
  PENDING
  APPROVED
  REJECTED
}

/// ------- NextAuth tables -------
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// ---------- Models ----------
model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  password       String?
  role           UserRole      @default(USER)
  address        String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // relasi (one-to-one)
  organization   Organization? @relation("OrgOwner")

  // lainnya
  volunteerActivities VolunteerActivity[]
  notifications       Notification[]

  // NextAuth relations
  accounts  Account[]
  sessions  Session[]
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  description String
  licenseNumber String?
  isVerified  Boolean   @default(false)
  
  // relasi ke User
  owner         User        @relation("OrgOwner", fields: [ownerId], references: [id])
  ownerId       Int         @unique


  activities  Activity[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
}

model Activity {
  id             Int            @id @default(autoincrement())
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId Int
  name           String
  description    String
  date           DateTime
  status         ActivityStatus @default(DRAFT)
  volunteerRequirement String?
  donationInstruction  String?

  location             String?
  quota                Int?
  coverUrl             String?

  // relasi
  volunteers     VolunteerActivity[]
  donations      Donation[]
  documents      Documentation[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([organizationId])
  @@index([status, date])
}

model VolunteerActivity {
  id          Int                @id @default(autoincrement())
  user        User               @relation(fields: [userId], references: [id])
  userId      Int
  activity    Activity           @relation(fields: [activityId], references: [id])
  activityId  Int
  status      VerificationStatus @default(PENDING)
  appliedAt   DateTime           @default(now())

  @@unique([userId, activityId])
  @@index([activityId, status])
}

model Donation {
  id            Int            @id @default(autoincrement())

  activity      Activity       @relation(fields: [activityId], references: [id])
  activityId    Int

  name          String
  email         String
  phone         String?
  amount        Decimal        @db.Decimal(14, 2)
  method        String
  message       String?
  proofPath     String
  status        DonationStatus @default(PENDING)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([activityId, status])
  @@index([email])
}

model Documentation {
  id           Int       @id @default(autoincrement())
  activity     Activity  @relation(fields: [activityId], references: [id])
  activityId   Int
  fileType     FileType
  filePath     String
  description  String?
  takenAt      DateTime   @default(now())

  @@index([activityId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  url       String?
  kind      String   // bebas: "VOLUNTEER_APPLY", "DONATION_NEW", "DONATION_APPROVED", dll
  createdAt DateTime @default(now())
  readAt    DateTime?

  @@index([userId, createdAt])
}
